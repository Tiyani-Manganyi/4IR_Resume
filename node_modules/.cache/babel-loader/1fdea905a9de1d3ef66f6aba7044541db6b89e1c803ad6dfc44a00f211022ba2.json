{"ast":null,"code":"var _jsxFileName = \"D:\\\\Downloads\\\\Resume-Builder-master\\\\Resume-Builder-master\\\\src\\\\Components\\\\InputComponents\\\\TextField.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\n\n// This is a custom 'textfield' input component, that allows the application to provide text input field along with validation check\n// It takes general textfield parameters as parameters/props, and along with them it also takes an additional parameter --validation--\n// which provides different validation checks.\n// Different validation parameters are as follows:\n// 1. validation={required:true} ensures that some value must be given for the given field.\n// 2. validation={maxLengthRequired:10} ensures that the number of characters in the input does not exceed 10 characters.\n// 3. validation={checkType:email} ensures that the input entered in the field matches with email pattern\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TextField(props) {\n  _s();\n  const [value, setvalue] = useState(props.value);\n  const showErrorMessages = useSelector(state => state.dataStore.showErrorMessages);\n  const checkValidation = () => {\n    // this function checks the validation of the input given by the user.\n    let errorMessage = \"\";\n    if (props.validation && props.validation.required && value === \"\") {\n      //this will throw error as 'required' if the user hasn't filled that input but the validation={required:true}.\n      errorMessage = '*required!';\n    } else if (props.validation && props.validation.maxLengthRequired && value.length > props.validation.maxLengthRequired) {\n      // this will throw error as 'write upto n characters' when the user exceeds the character limit provided as validation={maxLengthRequired:n}.\n      errorMessage = 'write upto ' + props.validation.maxLengthRequired + ' characters';\n    } else if (props.validation && props.validation.checkType && props.validation.checkType === 'email') {\n      //this will throw error as \"Invalid Email address!\" when the user input doesn't match with the pattern of email, if validation={checkType:email}.\n      if (!/\\S+@\\S+\\.\\S+/.test(value)) {\n        errorMessage = \"Invalid Email address!\";\n      }\n    }\n    return errorMessage;\n  };\n  let errorMessage = checkValidation(); // this variable stores the returned value 'i.e errorMessage' by calling the function on each render of the component.\n\n  useEffect(() => {\n    //this callback function is only called once the page renders.\n    if (props.validation && props.validation.required) {\n      if (value === \"\") {\n        props.onChange(value, '*required!');\n      }\n    }\n  }, []);\n  useEffect(() => {\n    // This is called everytime the input value is changed.\n    // Debouncing is implemented here. So that the props.onChange() function is not called \n    // on every character input.\n\n    let timerOutId;\n    if (value !== props.value && props.onChange) {\n      timerOutId = setTimeout(() => {\n        if (props.validation) {\n          //this props.onChange function sends the 'value' which equals user input alongwith the 'errorMessage' to the parent component where this 'TextField' component is rendered.\n          props.onChange(value, errorMessage);\n        } else {\n          //if there is no validation attribute passed to this component,as props from the parent then this condition will execute.\n          props.onChange(value, \"\");\n        }\n      }, 500);\n    }\n    return () => {\n      clearTimeout(timerOutId);\n    };\n  }, [value]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-100 h-100 position-relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: (value !== \"\" || showErrorMessages === true) && errorMessage !== \"\" ? {\n        display: 'block',\n        position: 'absolute',\n        bottom: -20,\n        color: \"rgb(247, 89, 89)\"\n      } : {\n        display: 'none'\n      },\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"input-style\",\n      id: props.elementId,\n      type: props.type,\n      value: value,\n      placeholder: props.placeholder,\n      onChange: e => {\n        // this sets the 'value' state equal to the input given by the user.\n        setvalue(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(TextField, \"r4Mf41xPVWUUJ6IcLCJEd1wEqLA=\", false, function () {\n  return [useSelector];\n});\n_c = TextField;\nexport default TextField;\nvar _c;\n$RefreshReg$(_c, \"TextField\");","map":{"version":3,"names":["React","useState","useEffect","useSelector","TextField","props","value","setvalue","showErrorMessages","state","dataStore","checkValidation","errorMessage","validation","required","maxLengthRequired","length","checkType","test","onChange","timerOutId","setTimeout","clearTimeout","display","position","bottom","color","elementId","type","placeholder","e","target"],"sources":["D:/Downloads/Resume-Builder-master/Resume-Builder-master/src/Components/InputComponents/TextField.js"],"sourcesContent":["import React,{useState,useEffect} from 'react'\nimport { useSelector } from 'react-redux'\n\n// This is a custom 'textfield' input component, that allows the application to provide text input field along with validation check\n// It takes general textfield parameters as parameters/props, and along with them it also takes an additional parameter --validation--\n// which provides different validation checks.\n// Different validation parameters are as follows:\n// 1. validation={required:true} ensures that some value must be given for the given field.\n// 2. validation={maxLengthRequired:10} ensures that the number of characters in the input does not exceed 10 characters.\n// 3. validation={checkType:email} ensures that the input entered in the field matches with email pattern\n\nfunction TextField(props) {\n    const [value, setvalue] = useState(props.value)\n    const showErrorMessages = useSelector(state=> state.dataStore.showErrorMessages)\n    \n\n    const checkValidation =()=>{\n        // this function checks the validation of the input given by the user.\n        let errorMessage = \"\";\n        if(props.validation && props.validation.required &&  value===\"\"){\n            //this will throw error as 'required' if the user hasn't filled that input but the validation={required:true}.\n                errorMessage='*required!'\n        }\n        \n        else if(props.validation && props.validation.maxLengthRequired && value.length>props.validation.maxLengthRequired){\n            // this will throw error as 'write upto n characters' when the user exceeds the character limit provided as validation={maxLengthRequired:n}.\n                errorMessage='write upto '+props.validation.maxLengthRequired+' characters'\n        }\n\n        else if(props.validation &&  props.validation.checkType && props.validation.checkType==='email'){\n            //this will throw error as \"Invalid Email address!\" when the user input doesn't match with the pattern of email, if validation={checkType:email}.\n            if(!(/\\S+@\\S+\\.\\S+/.test(value))){\n                errorMessage=\"Invalid Email address!\"\n            }\n        }\n\n        return errorMessage\n    }\n\n    let errorMessage = checkValidation() // this variable stores the returned value 'i.e errorMessage' by calling the function on each render of the component.\n    \n    useEffect(() => {\n        //this callback function is only called once the page renders.\n        if(props.validation && props.validation.required){\n            if(value===\"\"){\n                props.onChange(value,'*required!')\n            }\n        }\n    }, [])\n\n    useEffect(() => {\n    // This is called everytime the input value is changed.\n    // Debouncing is implemented here. So that the props.onChange() function is not called \n    // on every character input.\n\n       let timerOutId;\n       \n       if(value !== props.value && props.onChange){\n            timerOutId = setTimeout(()=>{\n                if(props.validation){\n                    //this props.onChange function sends the 'value' which equals user input alongwith the 'errorMessage' to the parent component where this 'TextField' component is rendered.\n                    props.onChange(value, errorMessage)\n                }\n                else{\n                    //if there is no validation attribute passed to this component,as props from the parent then this condition will execute.\n                    props.onChange(value, \"\")\n                }\n            },500)\n       }\n        return()=>{\n            clearTimeout(timerOutId)\n        }\n    }, [value])\n\n  return (\n    <div className='w-100 h-100 position-relative'>\n        {/* here value!==\"\" ensures that the errorMessages are not shown initially when the page is rendered,\n        but shown when the showErrorMessages is set as true and that happens when the 'isFormValid' is false */}\n        <div  style={((value!==\"\" || showErrorMessages === true)  && errorMessage!==\"\")?{display:'block',position:'absolute', bottom:-20,color:\"rgb(247, 89, 89)\",}:{display:'none'}}>{errorMessage}</div>\n        <input\n            className='input-style'\n            id={props.elementId}\n            type={props.type}\n            value={value}\n            placeholder={props.placeholder}\n            onChange ={(e)=>{\n                // this sets the 'value' state equal to the input given by the user.\n                setvalue(e.target.value)\n            }}\n        />\n    </div>\n  )\n}\n\nexport default TextField\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}